@Library('slacksnippitvikas') _
node{

try {
        sendSlackNotifications()
        
def mavenHome = tool name: 'Maven_3.8.7'

parameters {
  choice choices: ['master', 'development', 'stage'], description: 'select req branch', name: 'Branch'
}

stage('getCode'){
git credentialsId: 'f0ce6714-a8e9-4abe-a87d-ea7ad6ad9d2c', url: 'https://github.com/vks-devops/maven-web-application.git'
}

stage('Build'){
sh "${mavenHome}/bin/mvn clean package"
}

stage ('sonarReprt')
{
withSonarQubeEnv('sonarQubeserver') {
sh "${mavenHome}/bin/mvn sonar:sonar"
}
}
/*
stage("Quality Gate"){
  timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
    def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
    if (qg.status != 'OK') {
      error "Pipeline aborted due to quality gate failure: ${qg.status}"
    }
  }
}

*/
stage ('nexus'){
sh "${mavenHome}/bin/mvn deploy"
} 

stage ('tomcat deploy'){
sshagent(['bf8e843e-ef9e-4e02-8e73-a5ca224e0a62']) {
sh "scp -o  StrictHostKeyChecking=false  target/maven-web-application.war  ec2-user@13.127.228.133:/opt/apache-tomcat/webapps"
}
}


} //try end

  catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        sendSlackNotifications(currentBuild.result)
    }


} //nodeClose

/*

def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#FFA500'
    } else if (buildStatus == 'SUCCESS') {
        color = '#006400'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}
*/
